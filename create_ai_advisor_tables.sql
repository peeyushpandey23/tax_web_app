-- AI Advisor Database Tables
-- Create tables for AI advisor conversations and recommendations

-- AI Advisor Conversation Table
CREATE TABLE IF NOT EXISTS "AIAdvisorConversation" (
    conversation_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    session_id UUID NOT NULL REFERENCES "UserFinancials"(session_id) ON DELETE CASCADE,
    conversation_round INTEGER NOT NULL CHECK (conversation_round >= 1 AND conversation_round <= 4),
    gemini_question TEXT NOT NULL CHECK (length(gemini_question) >= 10 AND length(gemini_question) <= 500),
    user_response TEXT NOT NULL CHECK (length(user_response) >= 5 AND length(user_response) <= 1000),
    conversation_context JSONB,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- AI Advisor Recommendations Table
CREATE TABLE IF NOT EXISTS "AIAdvisorRecommendations" (
    recommendation_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    session_id UUID NOT NULL REFERENCES "UserFinancials"(session_id) ON DELETE CASCADE,
    conversation_id UUID NOT NULL REFERENCES "AIAdvisorConversation"(conversation_id) ON DELETE CASCADE,
    recommendation_type VARCHAR(50) NOT NULL CHECK (recommendation_type IN ('tax_optimization', 'investment_advice', 'lifestyle_adjustments', 'long_term_planning')),
    recommendation_title VARCHAR(100) NOT NULL CHECK (length(recommendation_title) >= 10 AND length(recommendation_title) <= 100),
    recommendation_description TEXT NOT NULL CHECK (length(recommendation_description) >= 20 AND length(recommendation_description) <= 500),
    action_items JSONB,
    priority_level VARCHAR(10) NOT NULL DEFAULT 'medium' CHECK (priority_level IN ('low', 'medium', 'high')),
    estimated_savings DECIMAL(15,2) CHECK (estimated_savings >= 0),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Create indexes for better performance
CREATE INDEX IF NOT EXISTS idx_ai_conversation_session_id ON "AIAdvisorConversation"(session_id);
CREATE INDEX IF NOT EXISTS idx_ai_conversation_round ON "AIAdvisorConversation"(session_id, conversation_round);
CREATE INDEX IF NOT EXISTS idx_ai_recommendations_session_id ON "AIAdvisorRecommendations"(session_id);
CREATE INDEX IF NOT EXISTS idx_ai_recommendations_conversation_id ON "AIAdvisorRecommendations"(conversation_id);
CREATE INDEX IF NOT EXISTS idx_ai_recommendations_priority ON "AIAdvisorRecommendations"(priority_level, estimated_savings DESC);

-- Add comments for documentation
COMMENT ON TABLE "AIAdvisorConversation" IS 'Stores AI advisor conversation history with users';
COMMENT ON TABLE "AIAdvisorRecommendations" IS 'Stores personalized recommendations generated by AI advisor';

COMMENT ON COLUMN "AIAdvisorConversation".conversation_round IS 'Round number (1-4) in the conversation flow';
COMMENT ON COLUMN "AIAdvisorConversation".gemini_question IS 'Question generated by Gemini AI';
COMMENT ON COLUMN "AIAdvisorConversation".user_response IS 'User response to the AI question';
COMMENT ON COLUMN "AIAdvisorConversation".conversation_context IS 'JSON context for maintaining conversation state';

COMMENT ON COLUMN "AIAdvisorRecommendations".recommendation_type IS 'Type of recommendation: tax_optimization, investment_advice, lifestyle_adjustments, long_term_planning';
COMMENT ON COLUMN "AIAdvisorRecommendations".priority_level IS 'Priority level: low, medium, high';
COMMENT ON COLUMN "AIAdvisorRecommendations".estimated_savings IS 'Estimated savings in rupees from following this recommendation';
COMMENT ON COLUMN "AIAdvisorRecommendations".action_items IS 'JSON array of specific action steps';
